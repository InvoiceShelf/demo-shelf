<!DOCTYPE html>
<html lang="en">
  <head>
    <title><%= websiteName %></title>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" type="text/css" href="/demo-shelf/main.css" />
  </head>

  <body>
    <div id="app" v-cloak>
      <div class="main" v-if="!iframeSrc">
        <div class="entry card" v-if="showEntry">
          <div class="bg">
            <h2 class="heading"><%= websiteName %></h2>

            <p class="paragraph">
              This is a demo of <%= websiteName %>. You can use this demo to try
              out the software before installing it on your own server.
            </p>

            <button class="btn btn-primary btn-big" @click="start">
              Start Demo
            </button>
          </div>
        </div>

        <div class="entry card blue-glow" v-if="loading">
          <div class="bg">
            <p class="paragraph">Preparing your demo, please wait...</p>
          </div>
        </div>

        <div class="entry card blue-glow" v-if="showEnd">
          <div class="bg">
            <h2 class="heading"><%= websiteName %> has Ended</h2>

            <p class="paragraph">
              <%= websiteName %> has ended, you can start a new demo by
              refreshing the page. Better still, why not Install it and use it!
            </p>

            <a href="<%= installURL %>" class="btn eager btn-primary"
              >Install now</a
            >
          </div>
        </div>
      </div>

      <div class="fixed" v-if="showFixed">
        <div class="fixed-inner">
          <p>
            <span class="countdown">{{ countdown }}</span>
            <a href="<%= installURL %>" class="install-link" target="_blank"
              >Install now</a
            >
          </p>
        </div>
      </div>

      <iframe :src="iframeSrc" v-if="iframeSrc"></iframe>

      <div class="popup-overlay" v-if="showPopup && iframeSrc">
        <div class="entry card blue-glow">
          <div class="bg">
            <h2 class="heading">How to setup your demo</h2>

            <p class="paragraph left">
              Currently, the demo
              <u>cannot automatically set up the database</u>, but do not worry;
              it is very straightforward.
            </p>

            <p class="paragraph left">
              All you need to do is select "SQLite" from the dropdown menu when
              prompted about which database to use, and keep all the default
              settings. That's all there is to it!
            </p>

            <p class="paragraph joke left">
              Alright then, upstairs, my little nose miners! Go! Flee before me!
              Onward and upward. Go pump some neurons! Expand your craniums!<br />
            </p>

            <p class="paragraph joke right">- Euphegenia Doubtfire</p>

            <button
              class="popup-close btn btn-primary blue"
              @click="closePopup"
            >
              Understood
            </button>
          </div>
        </div>
      </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/vue/3.4.2/vue.global.prod.min.js"></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/js/bootstrap.bundle.min.js"
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    ></script>
    <script>
      const sessionTime = <%= sessionTime %>;
      const autoStart = <%- JSON.stringify(autoStart) %>;
      let entryPath = <%- JSON.stringify(entryPath) %>;
      let timer;

      const {
        createApp
      } = Vue;
      createApp({
        data() {
          return {
            showEntry: false,
            loading: false,
            iframeSrc: "",
            countdown: "00:00",
            showFixed: false,
            showEnd: false,
            showPopup: false,
          }
        },
        computed: {

        },
        async mounted() {
          console.info("Mounted");

          // If session-id cookie is set, we can skip the entry screen
          if (document.cookie.indexOf("session-id") !== -1) {
            // Check if the session-id is still valid
            try {
              let res = await fetch("/demo-shelf/validate-session");
              let obj = await res.json();
              if (obj.ok) {
                this.showEntry = false;
                this.iframeSrc = entryPath;
                this.startTimer();
              } else {
                this.entryAction();
              }
            } catch (e) {
              this.entryAction();
            }
          } else {
            this.entryAction();
          }

          // Show popup if not shown in the last 10 minutes
          const lastPopupTime = localStorage.getItem('lastPopupTime');
          if (!lastPopupTime || Date.now() - lastPopupTime > sessionTime * 1000) {
            this.showPopup = true;
          }
        },
        methods: {
          entryAction() {
            if (autoStart) {
              this.start();
            } else {
              this.showEntry = true;
            }
          },

          async start() {
            this.showEntry = false;
            this.loading = true;

            try {
              let res = await fetch("/demo-shelf/start-instance");
              let obj = await res.json();

              if (res.status === 200 && obj.ok) {
                this.loading = false;
                this.iframeSrc = entryPath;

                localStorage.setItem("endSessionTime", obj.endSessionTime);
                this.startTimer();

              } else {
                this.loading = false;
                alert("Error starting demo, please try again later.");
                this.showEntry = true;
              }
            } catch (e) {
              this.loading = false;
              alert("Error starting demo, please try again later.");
              this.showEntry = true;
            }

          },

          startTimer() {
            if (timer) {
              return;
            }

            this.showFixed = true;
            let endSessionTime = localStorage.getItem("endSessionTime");


            timer = setInterval(() => {
              let now = Date.now();
              let distance = endSessionTime - now;

              console.log(distance)

              let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60)) + "";
              let seconds = Math.floor((distance % (1000 * 60)) / 1000) + "";

              this.countdown = minutes.padStart(2, "0") + ":" + seconds.padStart(2, "0");

              if (distance <= 0) {
                clearInterval(timer);
                this.countdown = "00:00";
                this.iframeSrc = "";
                this.showEnd = true;
                this.showFixed = false;
              }
            }, 1000);
          },

          closePopup() {
            this.showPopup = false;
            localStorage.setItem('lastPopupTime', Date.now());
          }
        }
      }).mount('#app');
    </script>
  </body>
</html>
